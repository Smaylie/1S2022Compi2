------------------------------------------------------------------------------
Analizador léxico, agregar este código en el archivo Lexico para prueba
------------------------------------------------------------------------------

package analizadores;
import java_cup.runtime.Symbol; 

%% 
%class Lexico
%public 
%line 
%char 
%cup 
%unicode
%ignorecase

%init{ 
    yyline = 1; 
    yychar = 1; 
%init} 

CADENA= [a-zA-ZñÑ]+
BLANCOS=[ \r\t]+

%%

"," {return new Symbol(sym.COMA,yyline,yychar, yytext());} 

\n {yychar=1;}

{BLANCOS} {} 
{CADENA} {return new Symbol(sym.CAD,yyline,yychar,yytext());}

. {
    System.out.println("Este es un error lexico: "+yytext()+
    ", en la linea: "+yyline+", en la columna: "+yychar);
}


------------------------------------------------------------------------------
Analizador Sintáctico, agregar este código en el archivo Sintactico para prueba
------------------------------------------------------------------------------

package analizadores; 
import java_cup.runtime.*;

parser code 
{:
    string primera = "";

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal String COMA, CAD;

non terminal S;
non terminal L;

start with S; 

S::=L                           {: System.out.println(primera); :};
L ::= L COMA CADENA:cadena      {: System.out.println(cadena +" , "); :}
 | CADENA:cadena                {: primera = cadena; :}
;